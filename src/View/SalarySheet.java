/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package View;

import Model.Customer;
import Model.DataHandler;
import Model.Employee;
import Model.PermanentEmp;
import Model.Person;
import Model.Project;
import Model.ProjectLeader;
import Model.TempEmp;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Nuzla
 */
public class SalarySheet extends javax.swing.JInternalFrame {
 private List<Employee> emps = new ArrayList<Employee>();
    /**
     * Creates new form SalarySheet
     */
    public SalarySheet() {
        initComponents();
        
        for(Person p: DataHandler.getInstance().getAllPeople()){
        if(p instanceof Employee)
            emps.add((Employee)p);
        }
        JTable table = new JTable();
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(table);

        table.setFillsViewportHeight(true);

        table.setModel(new AbstractTableModel() {
            public String getColumnName(int col) {
                switch (col) {
                    case 0:
                        return "Employee Name";
                    case 1:
                        return "Type";
                    case 2:
                        return "Salary";
                    default:
                        throw new RuntimeException("Error!");
                }
            }

            public int getRowCount() {
                return emps.size();
            }

            public int getColumnCount() {
                return 3;
            }

            public Object getValueAt(int row, int col) {
               Employee c = emps.get(row);
                
                switch (col) {
                    case 0:
                        return c.getName().toString();
                    case 1:
                        if(c instanceof ProjectLeader)
                            return "Permenant - Project Leader";
                        else if(c instanceof PermanentEmp)
                            return "Permenant - Other";
                        else
                            return "Temporary";
                    case 2:
                        if(c instanceof PermanentEmp)
                            return ((PermanentEmp)c).getSalary();
                        else
                            return ((TempEmp)c).getRate()*((TempEmp)c).getHours();
                    default:
                        throw new RuntimeException("Error!");
                }
            }

            public boolean isCellEditable(int row, int col) {
                return false;
            }
        });

this.add(scrollPane,BorderLayout.CENTER);
         pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 204, 204));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        setClosable(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 658, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
